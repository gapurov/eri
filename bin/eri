#!/usr/bin/env node

"use strict";

const {realpathSync, statSync} = require("fs");
const ERI_ROOT = realpathSync(`${__dirname}/../`);
const VERSION = require(`${ERI_ROOT}/package.json`).version;

var {exec, execSync} = require("child_process");

const IS_YARN_EXISTS = (function() {
  try {
    execSync("which yarn");
    return true;
  } catch (err) {
    return false;
  }
})();

process.title = "eri";
process.chdir(ERI_ROOT);

// Install dependencies if not exists
try {
  statSync(`${ERI_ROOT}/node_modules`);
} catch (err) {
  if (err.code !== "ENOENT") {
    throw err;
  }

  console.log("Install dependencies before you begin.");
  console.log("Please, be patient.");
  execSync((IS_YARN_EXISTS === true ? "yarn" : "npm i"), {
    stdio: "inherit"
  });
}

const commander = require("commander");
const pify = require("pify");
const ora = require("ora")();
const {cross} = require("figures");
const {red} = require("chalk");

exec = pify(exec);

function onFulfilled() {
  ora.text = "Done without errors.";
  ora.succeed();
  process.exit(0);
}

function onError(err, stackTrace = false) {
  if (stackTrace) {
    console.log(red(cross), err.stack);
  } else {
    ora.text = String(err);
    ora.fail();
  }

  process.exit(1);
}

function actionSetup(cmd) {
  ora.color = "cyan";
  ora.text = "Build backend app...";
  ora.start();

  exec(`${ERI_ROOT}/node_modules/.bin/cake make`)
    .then(() => {
      ora.color = "yellow";
      ora.text = "Build frontend app...";
      return exec(`${ERI_ROOT}/node_modules/.bin/gulp make`);
    })
    .then(() => {
      ora.stop();
      return require(`${ERI_ROOT}/setup/setup`)(cmd);
    })
    .then(onFulfilled, err => onError(err, cmd.parent.T));
}

function actionRun(cmd) {
  try {
    require(`${ERI_ROOT}/core/server`);
  } catch (err) {
    onError(err, cmd.parent.T);
  }
}

commander
  .version(VERSION)
  .usage("<command> [options]");

commander
  .command("setup")
  .alias("s")
  .description("Run installer script")
  .option(
    "--skip-register, -s",
    "skip owner account registration (use it ONLY for CI)"
  )
  .option(
    "--register, -r", "create owner account while installation using console"
  )
  .option("--configure, -c", "configure app while installation using console")
  .action(actionSetup);

commander
  .command("run")
  .alias("r")
  .description("run your Eri app instance")
  .action(actionRun);

commander
  .option("--stack-trace, -t", "show stack trace on errors");

commander.parse(process.argv);

process.on("SIGINT", () => process.exit(0));
